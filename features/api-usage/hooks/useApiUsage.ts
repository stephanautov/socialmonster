"use client";

import { api } from "@/lib/trpc";
import { useToast } from "@/components/ui/toast";
import { ApiUsage } from "@/types";

/**
 * Custom hook for ApiUsage CRUD operations
 *
 * Generated by MultiFileGenerator
 */
export function useApiUsage() {
  const { toast } = useToast();
  const utils = api.useUtils();

  // Query: Fetch list of apiusages
  const {
    data: apiusages,
    isLoading,
    error,
    refetch,
  } = api.apiUsage.list.useQuery(undefined, {
    staleTime: 5 * 60 * 1000, // 5 minutes
  });

  // Mutation: Create ApiUsage
  const { mutate: createApiUsage, isPending: isCreating } =
    api.apiUsage.create.useMutation({
      onSuccess: () => {
        utils.apiUsage.list.invalidate();
        toast({
          title: "Success",
          description: "ApiUsage created successfully",
        });
      },
      onError: (error) => {
        toast({
          title: "Error",
          description: error.message || "Failed to create apiusage",
          variant: "destructive",
        });
      },
    });

  // Mutation: Update ApiUsage
  const { mutate: updateApiUsage, isPending: isUpdating } =
    api.apiUsage.update.useMutation({
      onSuccess: () => {
        utils.apiUsage.list.invalidate();
        toast({
          title: "Success",
          description: "ApiUsage updated successfully",
        });
      },
      onError: (error) => {
        toast({
          title: "Error",
          description: error.message || "Failed to update apiusage",
          variant: "destructive",
        });
      },
    });

  // Mutation: Delete ApiUsage
  const { mutate: deleteApiUsage, isPending: isDeleting } =
    api.apiUsage.delete.useMutation({
      onSuccess: () => {
        utils.apiUsage.list.invalidate();
        toast({
          title: "Success",
          description: "ApiUsage deleted successfully",
        });
      },
      onError: (error) => {
        toast({
          title: "Error",
          description: error.message || "Failed to delete apiusage",
          variant: "destructive",
        });
      },
    });

  return {
    // Data
    apiusages: apiusages ?? [],
    isLoading,
    error,

    // Actions
    createApiUsage,
    updateApiUsage,
    deleteApiUsage,
    refetch,

    // Loading states
    isCreating,
    isUpdating,
    isDeleting,
  };
}
