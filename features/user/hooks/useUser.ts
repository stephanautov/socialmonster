"use client";

import { api } from "@/lib/trpc";
import { useToast } from "@/components/ui/toast";
import { User } from "@/types";

/**
 * Custom hook for User CRUD operations
 *
 * Generated by MultiFileGenerator
 */
export function useUser() {
  const { toast } = useToast();
  const utils = api.useUtils();

  // Query: Fetch list of users
  const {
    data: users,
    isLoading,
    error,
    refetch,
  } = api.user.list.useQuery(undefined, {
    staleTime: 5 * 60 * 1000, // 5 minutes
  });

  // Mutation: Create User
  const { mutate: createUser, isPending: isCreating } =
    api.user.create.useMutation({
      onSuccess: () => {
        utils.user.list.invalidate();
        toast({
          title: "Success",
          description: "User created successfully",
        });
      },
      onError: (error) => {
        toast({
          title: "Error",
          description: error.message || "Failed to create user",
          variant: "destructive",
        });
      },
    });

  // Mutation: Update User
  const { mutate: updateUser, isPending: isUpdating } =
    api.user.update.useMutation({
      onSuccess: () => {
        utils.user.list.invalidate();
        toast({
          title: "Success",
          description: "User updated successfully",
        });
      },
      onError: (error) => {
        toast({
          title: "Error",
          description: error.message || "Failed to update user",
          variant: "destructive",
        });
      },
    });

  // Mutation: Delete User
  const { mutate: deleteUser, isPending: isDeleting } =
    api.user.delete.useMutation({
      onSuccess: () => {
        utils.user.list.invalidate();
        toast({
          title: "Success",
          description: "User deleted successfully",
        });
      },
      onError: (error) => {
        toast({
          title: "Error",
          description: error.message || "Failed to delete user",
          variant: "destructive",
        });
      },
    });

  return {
    // Data
    users: users ?? [],
    isLoading,
    error,

    // Actions
    createUser,
    updateUser,
    deleteUser,
    refetch,

    // Loading states
    isCreating,
    isUpdating,
    isDeleting,
  };
}
