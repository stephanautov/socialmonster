"use client";

import * as React from "react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from "@/components/ui/form";
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
import { Loader2, Plus, Edit, Trash, Search, Filter } from "lucide-react";
import { api } from "@/lib/trpc";
import { User } from "@/types";

interface UserListProps {
  searchQuery?: string;
  onSelect?: (item: User) => void;
}

/**
 * User List Component
 *
 * Generated by MultiFileGenerator using UIBuilder.generateList()
 */
export function UserList({ searchQuery, onSelect }: UserListProps) {
  const [users, setUsers] = React.useState<User[]>([]);

  // tRPC query for fetching list
  const { data, isLoading: usersLoading, refetch } = api.user.list.useQuery();

  // Update local state when data changes
  React.useEffect(() => {
    if (data) {
      setUsers(data as any);
    }
  }, [data]);

  // CRUD handlers
  const handleCreate = () => {
    // TODO: Open create modal
  };

  const handleEdit = (id: string) => {
    // TODO: Open edit modal with item
    const item = users.find((item: any) => item.id === id);
    if (item && onSelect) {
      onSelect(item);
    }
  };

  const handleDelete = (id: string) => {
    // TODO: Confirm and delete
    if (confirm("Are you sure you want to delete this user?")) {
      // Implement delete mutation
    }
  };

      {/* User List */}
      <Card>
        <CardHeader>
          <div className="flex items-center justify-between">
            <div>
              <CardTitle>Users</CardTitle>
              <CardDescription>Manage your users</CardDescription>
            </div>
            <Button onClick={() => handleCreate()}>
              <Plus className="mr-2 h-4 w-4" />
              Add User
            </Button>
          </div>
        </CardHeader>
        <CardContent>
          {/* Search and Filters */}
          <div className="mb-6 flex flex-col sm:flex-row gap-4">
            <div className="relative flex-1">
              <Search className="absolute left-2 top-2.5 h-4 w-4 text-muted-foreground" />
              <Input
                placeholder="Search users..."
                value={searchQuery}
                onChange={(e) => setSearchQuery(e.target.value)}
                className="pl-8"
              />
            </div>
            <Button variant="outline" size="icon">
              <Filter className="h-4 w-4" />
            </Button>
          </div>

          {/* Data Table */}
          <div className="rounded-md border">
            <Table>
              <TableHeader>
                <TableRow>
                <TableHead>Id</TableHead>
                <TableHead>Email</TableHead>
                <TableHead>Password</TableHead>
                <TableHead>Email Verified</TableHead>
                <TableHead>Account Created Date</TableHead>
                  <TableHead className="text-right">Actions</TableHead>
                </TableRow>
              </TableHeader>
              <TableBody>
                {usersLoading ? (
                  <TableRow>
                    <TableCell colSpan={6} className="text-center">
                      <Loader2 className="mx-auto h-6 w-6 animate-spin" />
                    </TableCell>
                  </TableRow>
                ) : !users || users.length === 0 ? (
                  <TableRow>
                    <TableCell colSpan={6} className="text-center">
                      No users found
                    </TableCell>
                  </TableRow>
                ) : (
                  users.map((item) => (
                    <TableRow key={item.id}>
                      <TableCell>{item.id}</TableCell>
                  <TableCell>{item.email}</TableCell>
                  <TableCell>{item.password}</TableCell>
                  <TableCell>{item.emailVerified}</TableCell>
                  <TableCell>{item.accountCreatedDate}</TableCell>
                      <TableCell className="text-right">
                        <div className="flex justify-end gap-2">
                          <Button
                            variant="ghost"
                            size="icon"
                            onClick={() => handleEdit(item.id)}
                          >
                            <Edit className="h-4 w-4" />
                          </Button>
                          <Button
                            variant="ghost"
                            size="icon"
                            onClick={() => handleDelete(item.id)}
                          >
                            <Trash className="h-4 w-4" />
                          </Button>
                        </div>
                      </TableCell>
                    </TableRow>
                  ))
                )}
              </TableBody>
            </Table>
          </div>
        </CardContent>
      </Card>
}
