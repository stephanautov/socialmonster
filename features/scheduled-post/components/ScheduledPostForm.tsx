"use client";

import * as React from "react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from "@/components/ui/form";
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
import { Loader2, Plus, Edit, Trash, Search, Filter } from "lucide-react";
import { api } from "@/lib/trpc";
import { ScheduledPost } from "@/types";

interface ScheduledPostFormProps {
  onSuccess?: () => void;
  initialData?: ScheduledPost;
}

/**
 * ScheduledPost Form Component
 *
 * Generated by MultiFileGenerator using UIBuilder.generateForm()
 */
export function ScheduledPostForm({ onSuccess, initialData }: ScheduledPostFormProps) {
  const [isLoading, setIsLoading] = React.useState(false);
  const [isEditing] = React.useState(!!initialData);
  const [isModalOpen, setIsModalOpen] = React.useState(false);

  // tRPC mutations for create/update
  const { mutate: createScheduledPost } = api.scheduledPost.create.useMutation({
    onSuccess: () => {
      setIsLoading(false);
      onSuccess?.();
    },
    onError: () => {
      setIsLoading(false);
    },
  });

  const { mutate: updateScheduledPost } = api.scheduledPost.update.useMutation({
    onSuccess: () => {
      setIsLoading(false);
      onSuccess?.();
    },
    onError: () => {
      setIsLoading(false);
    },
  });

  // Form submission handler
  const onSubmit = (data: any) => {
    setIsLoading(true);
    if (isEditing && initialData?.id) {
      updateScheduledPost({ id: initialData.id, ...data });
    } else {
      createScheduledPost(data);
    }
  };

  // Form setup
  const form = React.useForm({
    defaultValues: initialData || {},
  });

      {/* ScheduledPost Form */}
      <Card>
        <CardHeader>
          <CardTitle>{isEditing ? 'Edit' : 'Create'} ScheduledPost</CardTitle>
          <CardDescription>
            {isEditing ? 'Update the information below' : 'Fill in the details to create a new scheduledPost'}
          </CardDescription>
        </CardHeader>
        <CardContent>
          <Form {...form}>
            <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6">
              <FormField
                control={form.control}
                name="contentPostId"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Content Post Id</FormLabel>
                    <FormControl>
                      <Input
                        type="text"
                        placeholder="Enter content post id"
                        {...field}
                      />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              <FormField
                control={form.control}
                name="socialMediaConnectionId"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Social Media Connection Id</FormLabel>
                    <FormControl>
                      <Input
                        type="text"
                        placeholder="Enter social media connection id"
                        {...field}
                      />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              <FormField
                control={form.control}
                name="platform"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Platform</FormLabel>
                    <FormControl>
                      <Input
                        type="text"
                        placeholder="Enter platform"
                        {...field}
                      />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              <FormField
                control={form.control}
                name="scheduledDateTime"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Scheduled Date Time</FormLabel>
                    <FormControl>
                      <Input
                        type="date"
                        placeholder="Enter scheduled date time"
                        {...field}
                      />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              <FormField
                control={form.control}
                name="platformSpecificContent"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Platform Specific Content</FormLabel>
                    <FormControl>
                      <Input
                        type="text"
                        placeholder="Enter platform specific content"
                        {...field}
                      />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              <FormField
                control={form.control}
                name="publishStatus"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Publish Status</FormLabel>
                    <FormControl>
                      <Input
                        type="text"
                        placeholder="Enter publish status"
                        {...field}
                      />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              <FormField
                control={form.control}
                name="publishedDateTime"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Published Date Time</FormLabel>
                    <FormControl>
                      <Input
                        type="date"
                        placeholder="Enter published date time"
                        {...field}
                      />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              <FormField
                control={form.control}
                name="platformPostId"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Platform Post Id</FormLabel>
                    <FormControl>
                      <Input
                        type="text"
                        placeholder="Enter platform post id"
                        {...field}
                      />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              <FormField
                control={form.control}
                name="errorMessage"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Error Message</FormLabel>
                    <FormControl>
                      <Input
                        type="text"
                        placeholder="Enter error message"
                        {...field}
                      />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              <FormField
                control={form.control}
                name="retryCount"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Retry Count</FormLabel>
                    <FormControl>
                      <Input
                        type="number"
                        placeholder="Enter retry count"
                        {...field}
                      />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              
              <div className="flex justify-end space-x-4">
                <Button
                  type="button"
                  variant="outline"
                  onClick={() => {
                    form.reset()
                    setIsModalOpen(false)
                  }}
                >
                  Cancel
                </Button>
                <Button type="submit" disabled={isLoading}>
                  {isLoading && <Loader2 className="mr-2 h-4 w-4 animate-spin" />}
                  {isEditing ? 'Update' : 'Create'}
                </Button>
              </div>
            </form>
          </Form>
        </CardContent>
      </Card>
}
