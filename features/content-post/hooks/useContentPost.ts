"use client";

import { api } from "@/lib/trpc";
import { useToast } from "@/components/ui/toast";
import { ContentPost } from "@/types";

/**
 * Custom hook for ContentPost CRUD operations
 *
 * Generated by MultiFileGenerator
 */
export function useContentPost() {
  const { toast } = useToast();
  const utils = api.useUtils();

  // Query: Fetch list of contentposts
  const {
    data: contentposts,
    isLoading,
    error,
    refetch,
  } = api.contentPost.list.useQuery(undefined, {
    staleTime: 5 * 60 * 1000, // 5 minutes
  });

  // Mutation: Create ContentPost
  const { mutate: createContentPost, isPending: isCreating } =
    api.contentPost.create.useMutation({
      onSuccess: () => {
        utils.contentPost.list.invalidate();
        toast({
          title: "Success",
          description: "ContentPost created successfully",
        });
      },
      onError: (error) => {
        toast({
          title: "Error",
          description: error.message || "Failed to create contentpost",
          variant: "destructive",
        });
      },
    });

  // Mutation: Update ContentPost
  const { mutate: updateContentPost, isPending: isUpdating } =
    api.contentPost.update.useMutation({
      onSuccess: () => {
        utils.contentPost.list.invalidate();
        toast({
          title: "Success",
          description: "ContentPost updated successfully",
        });
      },
      onError: (error) => {
        toast({
          title: "Error",
          description: error.message || "Failed to update contentpost",
          variant: "destructive",
        });
      },
    });

  // Mutation: Delete ContentPost
  const { mutate: deleteContentPost, isPending: isDeleting } =
    api.contentPost.delete.useMutation({
      onSuccess: () => {
        utils.contentPost.list.invalidate();
        toast({
          title: "Success",
          description: "ContentPost deleted successfully",
        });
      },
      onError: (error) => {
        toast({
          title: "Error",
          description: error.message || "Failed to delete contentpost",
          variant: "destructive",
        });
      },
    });

  return {
    // Data
    contentposts: contentposts ?? [],
    isLoading,
    error,

    // Actions
    createContentPost,
    updateContentPost,
    deleteContentPost,
    refetch,

    // Loading states
    isCreating,
    isUpdating,
    isDeleting,
  };
}
